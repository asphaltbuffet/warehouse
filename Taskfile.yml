version: "3"

tasks:
    check:
        desc: test and lint
        cmds:
            - task: test
            - task: lint

    dev:
        desc: dev build pipeline
        cmds:
            - task: generate
            - task: mock
            - task: lint
            - task: test
            - task: snapshot

    ci:
        desc: ci build pipeline
        cmds:
            - task: install
            - task: generate
            - task: mock
            - task: mod-tidy
            - task: test
            - task: cover
            - task: build
            - task: diff

    clean:
        desc: remove files created during build pipeline
        cmds:
            - rm -rf dist
            - rm -rf bin
            - rm -rf mocks

    nuke:
        desc: go clean + remove build artifacts
        deps: [clean]
        cmds:
            - go clean -i -cache -testcache -modcache -fuzzcache -x

    mod-tidy:
        desc: go mod tidy
        aliases: [mod]
        cmds:
            - go mod tidy
        sources:
            - "**/*.go"
            - "go.mod"
            - "go.sum"
        generates:
            - go.mod
            - go.sum

    install:
        desc: install tools
        cmds:
            - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
            - task: install-gofumpt
            - task: install-stringer
            - task: install-mockery
            - task: install-gotestsum
            - task: install-goreleaser

    install-goreleaser:
        internal: true
        cmds:
            - go install github.com/goreleaser/goreleaser@latest
        status:
            - if ! command -v goreleaser &> /dev/null; then exit 1; fi

    install-gotestsum:
        internal: true
        cmds:
            - go install gotest.tools/gotestsum@latest
        status:
            - if ! command -v gotestsum &> /dev/null; then exit 1; fi

    install-gofumpt:
        internal: true
        cmds:
            - go install mvdan.cc/gofumpt@v0.4.0
        status:
            - if ! command -v gofumpt &> /dev/null; then exit 1; fi

    generate:
        desc: generate artifacts
        aliases: [gen]
        cmds:
            - go generate ./...
        preconditions:
            - if ! command -v stringer &> /dev/null; then exit 1; fi

    install-stringer:
        cmds:
            - go install golang.org/x/tools/cmd/stringer@latest
        status:
            - if ! command -v stringer &> /dev/null; then exit 1; fi

    mock:
        desc: generate mocks
        # cmds:
        #     - mockery --log-level=warn
        # preconditions:
        #   - if ! command -v mockery &> /dev/null; then exit 1; fi

    install-mockery:
        cmds:
            - go install github.com/vektra/mockery/v2@v2.40.1
        status:
            - if ! command -v mockery &> /dev/null; then exit 1; fi

    build:
        desc: go build
        cmds:
            - go build -o dist/ ./...

    snapshot:
        desc: goreleaser build snapshot
        deps: [mod-tidy]
        aliases: [ss]
        cmds:
            - task: install
            - task: generate
            - goreleaser build --clean --single-target --snapshot

    lint:
        desc: golangci-lint
        deps: [generate, mock]
        cmds:
            - cmd: mkdir -p bin
              silent: true
            - golangci-lint run --fix --out-format=html:bin/golangci-lint.html,colored-line-number:stdout
        sources:
            - "**/*.go"
            - ".golangci.yml"
        generates:
            - bin/golangci-lint.html

    test:
        desc: go test
        deps: [generate, mock]
        cmds:
            - cmd: mkdir -p bin
              silent: true
            - gotestsum -- -race -covermode=atomic -coverprofile=bin/coverage.out $(go list ./... | grep -v /mocks)
        sources:
            - "**/*.go"
            - "**/testdata/**"
        generates:
            - bin/coverage.out

    cover:
        desc: go test coverage
        deps: [test]
        cmds:
            - go tool cover -html=bin/coverage.out -o bin/coverage.html
            - go tool cover -func=bin/coverage.out
        sources:
            - bin/coverage.out
        generates:
            - bin/coverage.html

    diff:
        desc: git diff
        cmds:
            - git diff --exit-code
            - RES="$(git status --porcelain)" ; if [ -n "$RES" ]; then echo $RES && exit 1 ; fi
